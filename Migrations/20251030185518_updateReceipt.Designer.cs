// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251030185518_updateReceipt")]
    partial class updateReceipt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "F2A4C7B8-9E1D-5B6C-8F7A-6D5E4B3C2A1F",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@evsystem.com",
                            EmailConfirmed = true,
                            FullName = "System Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EVSYSTEM.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPObFX2yWUOPm4hpjM163Nl64+ipd6Xpz7yGYFOE0vsE1lMTJvMlNk75wZn25hBatA==",
                            PhoneNumber = "0900000000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "E1F3B6A7-8D9C-4A5B-9E8F-7C6D5B4A3E2D",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11111111-2222-3333-4444-555555555555",
                            DateOfBirth = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "operator@evsystem.com",
                            EmailConfirmed = true,
                            FullName = "Trạm Operator",
                            LockoutEnabled = false,
                            NormalizedEmail = "OPERATOR@EVSYSTEM.COM",
                            NormalizedUserName = "OPERATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEPti/a9dQXrb7L6sjniNdM3QWjQhWtlZLB7tQwUaCxsyewD+D8MBhuXsE4afjntGfg==",
                            PhoneNumber = "0911111111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "A1111111-B222-4333-C444-D55555555555",
                            TwoFactorEnabled = false,
                            UserName = "operator"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66666666-7777-8888-9999-AAAAAAAAAAAA",
                            DateOfBirth = new DateTime(1992, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "manager@evsystem.com",
                            EmailConfirmed = true,
                            FullName = "Khu vực Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EVSYSTEM.COM",
                            NormalizedUserName = "MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAENMyFIG2LA4//qtHgDgkZB8TC+wvdKnkwxiD6JHIkMCX0dd+twv8zV7ea/CMfQnChw==",
                            PhoneNumber = "0922222222",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "B1111111-C222-4333-D444-E55555555555",
                            TwoFactorEnabled = false,
                            UserName = "manager"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "BBBBBBBB-CCCC-DDDD-EEEE-FFFFFFFFFFFF",
                            DateOfBirth = new DateTime(1994, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "technician@evsystem.com",
                            EmailConfirmed = true,
                            FullName = "Kỹ thuật viên bảo trì",
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@EVSYSTEM.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKV4vb55tRNp0q0sO0pF/Ua5A46af0IC1l5PZuNofciWemJVAk7vjQYutf5YQKjxfQ==",
                            PhoneNumber = "0933333333",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "C1111111-D222-4333-E444-F55555555555",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        });
                });

            modelBuilder.Entity("API.Entities.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ShiftEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ShiftStart")
                        .HasColumnType("time");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StationId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("API.Entities.ChargingPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ChargingPackages");
                });

            modelBuilder.Entity("API.Entities.ChargingPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsWalkIn")
                        .HasColumnType("bit");

                    b.Property<decimal>("PowerKW")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("QRCode")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("ChargingPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Q1-Type2-A",
                            ConnectorType = "Type2",
                            IsWalkIn = false,
                            PowerKW = 11m,
                            StationId = 1,
                            StationName = "",
                            Status = "Available",
                            Type = "Normal"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Q1-Type2-B",
                            ConnectorType = "Type2",
                            IsWalkIn = true,
                            PowerKW = 11m,
                            StationId = 1,
                            StationName = "",
                            Status = "Available",
                            Type = "Normal"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Q1-CCS2-A",
                            ConnectorType = "CCS2",
                            IsWalkIn = false,
                            PowerKW = 60m,
                            StationId = 1,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Q1-CCS2-B",
                            ConnectorType = "CCS2",
                            IsWalkIn = true,
                            PowerKW = 60m,
                            StationId = 1,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 5,
                            Code = "Q1-ULTRA-A",
                            ConnectorType = "CCS2",
                            IsWalkIn = false,
                            PowerKW = 150m,
                            StationId = 1,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 6,
                            Code = "Q1-ULTRA-B",
                            ConnectorType = "CCS2",
                            IsWalkIn = true,
                            PowerKW = 150m,
                            StationId = 1,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 7,
                            Code = "Q1-SC-A",
                            ConnectorType = "VinEScooter",
                            IsWalkIn = false,
                            PowerKW = 1.2m,
                            StationId = 1,
                            StationName = "",
                            Status = "Available",
                            Type = "Scooter"
                        },
                        new
                        {
                            Id = 8,
                            Code = "Q1-SC-B",
                            ConnectorType = "VinEScooter",
                            IsWalkIn = true,
                            PowerKW = 1.2m,
                            StationId = 1,
                            StationName = "",
                            Status = "Available",
                            Type = "Scooter"
                        },
                        new
                        {
                            Id = 9,
                            Code = "TD-Type2-A",
                            ConnectorType = "Type2",
                            IsWalkIn = false,
                            PowerKW = 11m,
                            StationId = 2,
                            StationName = "",
                            Status = "Available",
                            Type = "Normal"
                        },
                        new
                        {
                            Id = 10,
                            Code = "TD-Type2-B",
                            ConnectorType = "Type2",
                            IsWalkIn = true,
                            PowerKW = 11m,
                            StationId = 2,
                            StationName = "",
                            Status = "Available",
                            Type = "Normal"
                        },
                        new
                        {
                            Id = 11,
                            Code = "TD-CCS2-A",
                            ConnectorType = "CCS2",
                            IsWalkIn = false,
                            PowerKW = 60m,
                            StationId = 2,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 12,
                            Code = "TD-CCS2-B",
                            ConnectorType = "CCS2",
                            IsWalkIn = true,
                            PowerKW = 60m,
                            StationId = 2,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 13,
                            Code = "TD-ULTRA-A",
                            ConnectorType = "CCS2",
                            IsWalkIn = false,
                            PowerKW = 150m,
                            StationId = 2,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 14,
                            Code = "TD-ULTRA-B",
                            ConnectorType = "CCS2",
                            IsWalkIn = true,
                            PowerKW = 150m,
                            StationId = 2,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 15,
                            Code = "TD-SC-A",
                            ConnectorType = "VinEScooter",
                            IsWalkIn = false,
                            PowerKW = 1.2m,
                            StationId = 2,
                            StationName = "",
                            Status = "Available",
                            Type = "Scooter"
                        },
                        new
                        {
                            Id = 16,
                            Code = "TD-SC-B",
                            ConnectorType = "VinEScooter",
                            IsWalkIn = true,
                            PowerKW = 1.2m,
                            StationId = 2,
                            StationName = "",
                            Status = "Available",
                            Type = "Scooter"
                        },
                        new
                        {
                            Id = 17,
                            Code = "BD-Type2-A",
                            ConnectorType = "Type2",
                            IsWalkIn = false,
                            PowerKW = 11m,
                            StationId = 3,
                            StationName = "",
                            Status = "Available",
                            Type = "Normal"
                        },
                        new
                        {
                            Id = 18,
                            Code = "BD-Type2-B",
                            ConnectorType = "Type2",
                            IsWalkIn = true,
                            PowerKW = 11m,
                            StationId = 3,
                            StationName = "",
                            Status = "Available",
                            Type = "Normal"
                        },
                        new
                        {
                            Id = 19,
                            Code = "BD-CCS2-A",
                            ConnectorType = "CCS2",
                            IsWalkIn = false,
                            PowerKW = 60m,
                            StationId = 3,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 20,
                            Code = "BD-CCS2-B",
                            ConnectorType = "CCS2",
                            IsWalkIn = true,
                            PowerKW = 60m,
                            StationId = 3,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 21,
                            Code = "BD-ULTRA-A",
                            ConnectorType = "CCS2",
                            IsWalkIn = false,
                            PowerKW = 150m,
                            StationId = 3,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 22,
                            Code = "BD-ULTRA-B",
                            ConnectorType = "CCS2",
                            IsWalkIn = true,
                            PowerKW = 150m,
                            StationId = 3,
                            StationName = "",
                            Status = "Available",
                            Type = "Fast"
                        },
                        new
                        {
                            Id = 23,
                            Code = "BD-SC-A",
                            ConnectorType = "VinEScooter",
                            IsWalkIn = false,
                            PowerKW = 1.2m,
                            StationId = 3,
                            StationName = "",
                            Status = "Available",
                            Type = "Scooter"
                        },
                        new
                        {
                            Id = 24,
                            Code = "BD-SC-B",
                            ConnectorType = "VinEScooter",
                            IsWalkIn = true,
                            PowerKW = 1.2m,
                            StationId = 3,
                            StationName = "",
                            Status = "Available",
                            Type = "Scooter"
                        });
                });

            modelBuilder.Entity("API.Entities.ChargingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingPostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<decimal?>("EndBatteryPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("EnergyConsumed")
                        .HasColumnType("float");

                    b.Property<int>("IdleFee")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IdleFeeStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOverstay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWalkInSession")
                        .HasColumnType("bit");

                    b.Property<int?>("OverstayFee")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<decimal>("StartBatteryPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("StopReason")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("VehiclePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChargingPostId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ChargingSessions");
                });

            modelBuilder.Entity("API.Entities.DriverPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PackageId");

                    b.ToTable("DriverPackages");
                });

            modelBuilder.Entity("API.Entities.Pricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerKwh")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PricePerMinute")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pricings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveTo = new DateTime(2099, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Khách vãng lai - Sạc thường AC",
                            PricePerKwh = 4000m,
                            PriceType = "Guest_AC"
                        },
                        new
                        {
                            Id = 2,
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveTo = new DateTime(2099, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Khách vãng lai - Sạc nhanh DC",
                            PricePerKwh = 4800m,
                            PriceType = "Guest_DC"
                        },
                        new
                        {
                            Id = 3,
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveTo = new DateTime(2099, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Thành viên - Sạc thường AC",
                            PricePerKwh = 3500m,
                            PriceType = "Member_AC"
                        },
                        new
                        {
                            Id = 4,
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveTo = new DateTime(2099, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Thành viên - Sạc nhanh DC",
                            PricePerKwh = 4200m,
                            PriceType = "Member_DC"
                        },
                        new
                        {
                            Id = 5,
                            EffectiveFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveTo = new DateTime(2099, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Phí chiếm dụng",
                            PricePerKwh = 0m,
                            PricePerMinute = 1000m,
                            PriceType = "OccupancyFee"
                        });
                });

            modelBuilder.Entity("API.Entities.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmedByStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EnergyConsumed")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EnergyCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("IdleEndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IdleFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("IdleStartTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OverstayFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PricePerKwhSnapshot")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PricingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ConfirmedByStaffId");

                    b.HasIndex("PackageId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("API.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FixedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FixedNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MaintenanceEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MaintenanceStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TechnicianId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PostId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("API.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingPostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("TimeSlotEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeSlotStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChargingPostId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("API.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "12 Lê Lợi, Quận 1, TP.HCM",
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Code = "Q1HCM",
                            Description = "Trạm sạc trung tâm TP.HCM, hỗ trợ cả AC và DC",
                            Latitude = 10.776899999999999,
                            Longitude = 106.7009,
                            Name = "Trạm sạc VinFast Quận 1",
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Address = "35 Võ Văn Ngân, TP. Thủ Đức, TP.HCM",
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Code = "TDHCM",
                            Description = "Trạm sạc khu vực Thủ Đức, gần Vincom",
                            Latitude = 10.849500000000001,
                            Longitude = 106.7689,
                            Name = "Trạm sạc VinFast Thủ Đức",
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Address = "88 Đại Lộ Bình Dương, Thuận An, Bình Dương",
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Code = "BDBD",
                            Description = "Trạm sạc khu vực Bình Dương, thuận tiện cho xe di chuyển xa",
                            Latitude = 10.949999999999999,
                            Longitude = 106.75,
                            Name = "Trạm sạc VinFast Bình Dương",
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("API.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BatteryCapacityKWh")
                        .HasColumnType("float");

                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("MaxChargingPowerKW")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleRegistrationImageUrl")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Plate")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("API.Entities.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BatteryCapacityKWh")
                        .HasColumnType("float");

                    b.Property<int>("ConnectorType")
                        .HasColumnType("int");

                    b.Property<bool>("HasDualBattery")
                        .HasColumnType("bit");

                    b.Property<double?>("MaxChargingPowerAC_KW")
                        .HasColumnType("float");

                    b.Property<double?>("MaxChargingPowerDC_KW")
                        .HasColumnType("float");

                    b.Property<double?>("MaxChargingPowerKW")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VehicleModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatteryCapacityKWh = 3.5,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Theon S",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            BatteryCapacityKWh = 3.5,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Vento S",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            BatteryCapacityKWh = 3.5,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Vento Neo",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            BatteryCapacityKWh = 3.5,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Klara S2 (2022)",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            BatteryCapacityKWh = 2.0,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Klara Neo",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            BatteryCapacityKWh = 3.5,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Feliz S",
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            BatteryCapacityKWh = 2.0,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Feliz Neo/Lite",
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            BatteryCapacityKWh = 2.3999999999999999,
                            ConnectorType = 2,
                            HasDualBattery = true,
                            MaxChargingPowerKW = 1.2,
                            Model = "Feliz 2025",
                            Type = 0
                        },
                        new
                        {
                            Id = 9,
                            BatteryCapacityKWh = 3.5,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Evo 200/200 Lite",
                            Type = 0
                        },
                        new
                        {
                            Id = 10,
                            BatteryCapacityKWh = 2.3999999999999999,
                            ConnectorType = 2,
                            HasDualBattery = true,
                            MaxChargingPowerKW = 1.2,
                            Model = "Evo Grand",
                            Type = 0
                        },
                        new
                        {
                            Id = 11,
                            BatteryCapacityKWh = 2.0,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Evo Neo/Lite Neo",
                            Type = 0
                        },
                        new
                        {
                            Id = 12,
                            BatteryCapacityKWh = 2.0,
                            ConnectorType = 2,
                            HasDualBattery = false,
                            MaxChargingPowerKW = 1.2,
                            Model = "Motio",
                            Type = 0
                        },
                        new
                        {
                            Id = 13,
                            BatteryCapacityKWh = 18.640000000000001,
                            ConnectorType = 1,
                            HasDualBattery = false,
                            MaxChargingPowerAC_KW = 7.4000000000000004,
                            MaxChargingPowerDC_KW = 60.0,
                            Model = "VF 3",
                            Type = 1
                        },
                        new
                        {
                            Id = 14,
                            BatteryCapacityKWh = 37.229999999999997,
                            ConnectorType = 1,
                            HasDualBattery = false,
                            MaxChargingPowerAC_KW = 7.4000000000000004,
                            MaxChargingPowerDC_KW = 60.0,
                            Model = "VF 5 Plus",
                            Type = 1
                        },
                        new
                        {
                            Id = 15,
                            BatteryCapacityKWh = 42.0,
                            ConnectorType = 1,
                            HasDualBattery = false,
                            MaxChargingPowerAC_KW = 7.4000000000000004,
                            MaxChargingPowerDC_KW = 60.0,
                            Model = "VF e34",
                            Type = 1
                        },
                        new
                        {
                            Id = 16,
                            BatteryCapacityKWh = 59.600000000000001,
                            ConnectorType = 1,
                            HasDualBattery = false,
                            MaxChargingPowerAC_KW = 11.0,
                            MaxChargingPowerDC_KW = 150.0,
                            Model = "VF 6",
                            Type = 1
                        },
                        new
                        {
                            Id = 17,
                            BatteryCapacityKWh = 75.299999999999997,
                            ConnectorType = 1,
                            HasDualBattery = false,
                            MaxChargingPowerAC_KW = 11.0,
                            MaxChargingPowerDC_KW = 150.0,
                            Model = "VF 7",
                            Type = 1
                        },
                        new
                        {
                            Id = 18,
                            BatteryCapacityKWh = 87.700000000000003,
                            ConnectorType = 1,
                            HasDualBattery = false,
                            MaxChargingPowerAC_KW = 11.0,
                            MaxChargingPowerDC_KW = 150.0,
                            Model = "VF 8",
                            Type = 1
                        },
                        new
                        {
                            Id = 19,
                            BatteryCapacityKWh = 123.0,
                            ConnectorType = 1,
                            HasDualBattery = false,
                            MaxChargingPowerAC_KW = 11.0,
                            MaxChargingPowerDC_KW = 250.0,
                            Model = "VF 9",
                            Type = 1
                        });
                });

            modelBuilder.Entity("API.Entities.Wallet.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Dept")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDept")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("API.Entities.Wallet.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("VnpTxnRef")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Operator",
                            NormalizedName = "OPERATOR"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Entities.Assignment", b =>
                {
                    b.HasOne("API.Entities.AppUser", "Staff")
                        .WithMany("Assignments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("API.Entities.ChargingPost", b =>
                {
                    b.HasOne("API.Entities.Station", null)
                        .WithMany("Posts")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.ChargingSession", b =>
                {
                    b.HasOne("API.Entities.ChargingPost", "ChargingPost")
                        .WithMany()
                        .HasForeignKey("ChargingPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Receipt", "Receipt")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.HasOne("API.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("ChargingPost");

                    b.Navigation("Receipt");

                    b.Navigation("Reservation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("API.Entities.DriverPackage", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("DriverPackages")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.ChargingPackage", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("API.Entities.Receipt", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("Receipts")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Entities.AppUser", "ConfirmedByStaff")
                        .WithMany()
                        .HasForeignKey("ConfirmedByStaffId");

                    b.HasOne("API.Entities.DriverPackage", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId");

                    b.Navigation("AppUser");

                    b.Navigation("ConfirmedByStaff");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("API.Entities.Report", b =>
                {
                    b.HasOne("API.Entities.AppUser", "CreatedByStaff")
                        .WithMany("ReportsCreated")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.ChargingPost", "ChargingPost")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Technician")
                        .WithMany("ReportsAssignedToFix")
                        .HasForeignKey("TechnicianId");

                    b.Navigation("ChargingPost");

                    b.Navigation("CreatedByStaff");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("API.Entities.Reservation", b =>
                {
                    b.HasOne("API.Entities.ChargingPost", "Post")
                        .WithMany()
                        .HasForeignKey("ChargingPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("API.Entities.Vehicle", b =>
                {
                    b.HasOne("API.Entities.AppUser", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Entities.Wallet.Wallet", b =>
                {
                    b.HasOne("API.Entities.AppUser", "appUser")
                        .WithOne()
                        .HasForeignKey("API.Entities.Wallet.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appUser");
                });

            modelBuilder.Entity("API.Entities.Wallet.WalletTransaction", b =>
                {
                    b.HasOne("API.Entities.Receipt", null)
                        .WithMany("WalletTransactions")
                        .HasForeignKey("ReceiptId");

                    b.HasOne("API.Entities.Wallet.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("DriverPackages");

                    b.Navigation("Receipts");

                    b.Navigation("ReportsAssignedToFix");

                    b.Navigation("ReportsCreated");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("API.Entities.Receipt", b =>
                {
                    b.Navigation("ChargingSessions");

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("API.Entities.Station", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("API.Entities.Wallet.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
