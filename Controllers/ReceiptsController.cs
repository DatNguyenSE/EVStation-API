using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using API.DTOs.Receipt;
using API.Helpers;
using API.Interfaces.IServices;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers
{
    [ApiController]
    [Route("api/receipts")]
    [Authorize]
    public class ReceiptsController : ControllerBase
    {
        private readonly IReceiptService _receiptService;
        public ReceiptsController(IReceiptService receiptService)
        {
            _receiptService = receiptService;
        }

        /// <summary>
        /// [STAFF] X√°c nh·∫≠n thanh to√°n (ti·ªÅn m·∫∑t/th·∫ª) cho h√≥a ƒë∆°n c·ªßa kh√°ch v√£ng lai.
        /// </summary>
        [HttpPost("{id}/confirm-payment-by-staff")]
        [Authorize(Roles = AppConstant.Roles.Operator)]
        public async Task<IActionResult> ConfirmPaymentByStaff(int id, [FromBody] ConfirmPaymentRequestDto dto)
        {
            var staffId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(staffId))
            {
                return Unauthorized("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh nh√¢n vi√™n.");
            }

            if (string.IsNullOrWhiteSpace(dto.PaymentMethod))
            {
                return BadRequest("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }

            var result = await _receiptService.ConfirmWalkInPaymentAsync(id, staffId, dto.PaymentMethod);

            if (!result.IsSuccess)
            {
                if (result.ErrorMessage?.Contains("Kh√¥ng t√¨m th·∫•y") == true)
                {
                    return NotFound(result.ErrorMessage);
                }

                return BadRequest(result.ErrorMessage);
            }

            return NoContent(); // HTTP 204
        }

        /// <summary>
        /// [ADMIN/STAFF] H·ªßy m·ªôt h√≥a ƒë∆°n ƒëang ·ªü tr·∫°ng th√°i Pending.
        /// </summary>
        [HttpPost("{id}/cancel")]
        [Authorize(Roles = $"{AppConstant.Roles.Operator},{AppConstant.Roles.Admin}")]
        public async Task<IActionResult> CancelReceipt(int id, [FromBody] CancelRequestDto dto)
        {
            var staffId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(staffId))
            {
                return Unauthorized("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh nh√¢n vi√™n.");
            }

            var result = await _receiptService.CancelReceiptAsync(id, dto.Reason, staffId);

            if (!result.IsSuccess)
            {
                if (result.ErrorMessage?.Contains("Kh√¥ng t√¨m th·∫•y") == true)
                {
                    return NotFound(result.ErrorMessage);
                }
                return BadRequest(result.ErrorMessage);
            }

            return NoContent();
        }

        /// <summary>
        /// [ADMIN] Th·ª±c hi·ªán ho√†n ti·ªÅn cho m·ªôt h√≥a ƒë∆°n ƒë√£ thanh to√°n.
        /// </summary>
        [HttpPost("refund")]
        [Authorize(Roles = AppConstant.Roles.Admin)] // Ch·ªâ Admin m·ªõi ƒë∆∞·ª£c ho√†n ti·ªÅn
        public async Task<IActionResult> IssueRefund([FromBody] RefundRequestDto refundRequest)
        {
            var adminId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(adminId))
            {
                return Unauthorized("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh qu·∫£n tr·ªã vi√™n.");
            }

            var result = await _receiptService.IssueRefundForReceiptAsync(refundRequest, adminId);

            if (!result.IsSuccess)
            {
                if (result.ErrorMessage?.Contains("Kh√¥ng t√¨m th·∫•y") == true)
                {
                    return NotFound(result.ErrorMessage);
                }
                return BadRequest(result.ErrorMessage);
            }

            return Ok("Ho√†n ti·ªÅn th√†nh c√¥ng.");
        }

        // === USER ENDPOINTS ===

        /// <summary>
        /// [USER] L·∫•y l·ªãch s·ª≠ h√≥a ƒë∆°n (ƒë√£ ph√¢n trang) c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i.
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> GetUserReceipts([FromQuery] PagingParams pagingParams)
        {
            Console.WriteLine($"üîπ Received PageNumber={pagingParams.PageNumber}, PageSize={pagingParams.PageSize}");
            var appUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(appUserId))
            {
                return Unauthorized("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng.");
            }

            var result = await _receiptService.GetUserReceiptsAsync(appUserId, pagingParams);
            var paged = result.Data;

            // H√†m n√†y lu√¥n tr·∫£ v·ªÅ Success (c√≥ th·ªÉ l√† danh s√°ch r·ªóng)
            return Ok(
                new
                {
                    items = paged.ToList(),
                    pageNumber = paged.PageNumber,
                    pageSize = paged.PageSize,
                    totalItemCount = paged.TotalItemCount,
                    pageCount = paged.PageCount
                }
            );
        }

        /// <summary>
        /// [USER] L·∫•y chi ti·∫øt m·ªôt h√≥a ƒë∆°n C·ª¶A CH√çNH ng∆∞·ªùi d√πng hi·ªán t·∫°i.
        /// </summary>
        [HttpGet("{id}")]
        public async Task<IActionResult> GetReceiptDetails(int id)
        {
            var appUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(appUserId))
            {
                return Unauthorized("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng.");
            }

            var result = await _receiptService.GetReceiptDetailsAsync(id, appUserId);

            if (!result.IsSuccess)
            {
                // Service layer s·∫Ω ki·ªÉm tra xem receipt.AppUserId == appUserId
                // N·∫øu kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng c√≥ quy·ªÅn, ƒë·ªÅu tr·∫£ v·ªÅ l·ªói
                return NotFound(result.ErrorMessage);
            }

            return Ok(result.Data);
        }

        // === ADMIN/STAFF ENDPOINTS ===

        /// <summary>
        /// [ADMIN/STAFF] L·∫•y T·∫§T C·∫¢ h√≥a ƒë∆°n trong h·ªá th·ªëng (c√≥ l·ªçc, ph√¢n trang).
        /// </summary>
        [HttpGet("admin")]
        [Authorize(Roles = $"{AppConstant.Roles.Operator},{AppConstant.Roles.Admin}")]
        public async Task<IActionResult> GetAllReceiptsForAdmin(
            [FromQuery] ReceiptFilterParams filterParams,
            [FromQuery] PagingParams pagingParams)
        {
            var result = await _receiptService.GetAllReceiptsForAdminAsync(filterParams, pagingParams);
            return Ok(result.Data);
        }

        /// <summary>
        /// [ADMIN/STAFF] L·∫•y chi ti·∫øt m·ªôt h√≥a ƒë∆°n B·∫§T K·ª≤ theo ID.
        /// </summary>
        [HttpGet("admin/{id}")]
        [Authorize(Roles = $"{AppConstant.Roles.Operator},{AppConstant.Roles.Admin}")]
        public async Task<IActionResult> GetReceiptByIdForAdmin(int id)
        {
            var result = await _receiptService.GetReceiptByIdForAdminAsync(id);

            if (!result.IsSuccess)
            {
                return NotFound(result.ErrorMessage);
            }

            return Ok(result.Data);
        }
    }
}